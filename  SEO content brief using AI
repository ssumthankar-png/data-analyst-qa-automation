{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyPrneAOj7ubIAzoYlLzGuGC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ssumthankar-png/data-analyst-qa-automation/blob/main/%20SEO%20content%20brief%20using%20AI\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# üîß AI SEO BRIEF GENERATOR (PRO EDITION)\n",
        "# üí° Created by: @the_slide555\n",
        "# üéØ Goal: Generate SEO briefs + Promote Buy Me a Coffee\n",
        "# üåê Runs on: Google Colab / Hugging Face (Free Forever)\n",
        "\n",
        "import requests\n",
        "import gradio as gr\n",
        "from datetime import datetime\n",
        "\n",
        "# üîë ‡§Ö‡§™‡§®‡§æ Perplexity Pro API Key ‡§°‡§æ‡§≤‡•á‡§Ç (sonar-pro ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡§∞‡•Ç‡§∞‡•Ä)\n",
        "PERPLEXITY_API_KEY = \"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\"  # ‚Üê ‡§Ø‡§π‡§æ‡§Å ‡§°‡§æ‡§≤‡•á‡§Ç\n",
        "\n",
        "def generate_seo_brief(topic):\n",
        "    if not topic.strip():\n",
        "        return \"‚ö†Ô∏è Please enter a valid topic. Example: 'best yoga mats for beginners'\"\n",
        "\n",
        "    # üß† AI ‡§™‡•ç‡§∞‡•â‡§Æ‡•ç‡§™‡•ç‡§ü (2025 ‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§∏‡§æ‡§•)\n",
        "    prompt = f\"\"\"\n",
        "    Act as a senior SEO strategist. Create a detailed content brief for: '{topic}'\n",
        "\n",
        "    Include:\n",
        "    1. **SEO Title** (under 60 chars)\n",
        "    2. **Meta Description** (under 155 chars)\n",
        "    3. **Primary Keyword** and 5 **LSI Keywords**\n",
        "    4. **Top 3 Competitors** (with real URLs and why they rank)\n",
        "    5. **H2/H3 Structure** (logical flow for readers)\n",
        "    6. **Recommended Word Count**\n",
        "    7. **Tone of Voice** (e.g., Friendly, Professional)\n",
        "    8. **Internal Link Ideas** (2) and **External Links** (2 authoritative sources)\n",
        "    9. **CTA Idea** (e.g., download checklist, join course)\n",
        "    10. **Writer Notes**: Actionable tips, data sources, snippet optimization\n",
        "\n",
        "    Use 2025 trends. Output in clean Markdown. Add a --- separator at the end.\n",
        "    \"\"\"\n",
        "\n",
        "    headers = {\n",
        "        \"Authorization\": f\"Bearer {PERPLEXITY_API_KEY}\",\n",
        "        \"Content-Type\": \"application/json\"\n",
        "    }\n",
        "    payload = {\n",
        "        \"model\": \"sonar-pro\",\n",
        "        \"messages\": [\n",
        "            {\"role\": \"system\", \"content\": \"You are a helpful SEO assistant.\"},\n",
        "            {\"role\": \"user\", \"content\": prompt}\n",
        "        ],\n",
        "        \"max_tokens\": 1200,\n",
        "        \"temperature\": 0.7,\n",
        "        \"top_p\": 0.9,\n",
        "        \"search_mode\": \"web\"\n",
        "    }\n",
        "\n",
        "    try:\n",
        "        response = requests.post(\"https://api.perplexity.ai/chat/completions\", json=payload, headers=headers, timeout=45)\n",
        "        if response.status_code == 200:\n",
        "            ai_output = response.json()[\"choices\"][0][\"message\"][\"content\"]\n",
        "        else:\n",
        "            return f\"‚ùå API Error {response.status_code}: {response.text}\"\n",
        "    except Exception as e:\n",
        "        return f\"‚ö†Ô∏è Request failed. Check internet or API key.\\nError: {str(e)}\"\n",
        "\n",
        "    # üíñ ‡§§‡•á‡§∞‡•á ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡•ã ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•ã\n",
        "    support_message = f\"\"\"\n",
        "\n",
        "---\n",
        "üìÖ Generated on: {datetime.now().strftime(\"%B %d, %Y\")}\n",
        "üí° *Generated by* **AI SEO Brief Generator**\n",
        "‚ù§Ô∏è Loved this free tool? Support my work: [Buy Me a Coffee](https://buymeacoffee.com/the_slide555)\n",
        "üöÄ Created for bloggers, SEOs & content creators by @the_slide555\n",
        "    \"\"\"\n",
        "    return ai_output + support_message\n",
        "\n",
        "# üéØ Gradio UI (‡§Ö‡§ß‡§ø‡§ï ‡§Ü‡§ï‡§∞‡•ç‡§∑‡§ï ‡§î‡§∞ ‡§™‡•ç‡§∞‡•ã‡§´‡•á‡§∂‡§®‡§≤)\n",
        "demo = gr.Interface(\n",
        "    fn=generate_seo_brief,\n",
        "    inputs=gr.Textbox(\n",
        "        placeholder=\"Enter a blog topic, e.g., 'how to start dropshipping from India'\",\n",
        "        label=\"üéØ Enter Your Blog Topic\",\n",
        "        lines=2\n",
        "    ),\n",
        "    outputs=gr.Markdown(label=\"üìÑ AI-Generated SEO Brief\"),\n",
        "    title=\"üöÄ AI SEO Brief Generator 2025\",\n",
        "    description=\"\"\"\n",
        "    Get a complete, data-driven SEO content brief in seconds ‚Äî <b>100% FREE</b>.\n",
        "    Perfect for bloggers, SEO agencies & content teams.\n",
        "    <a href='https://buymeacoffee.com/the_slide555' target='_blank'>‚ù§Ô∏è Support this tool</a> |\n",
        "    <a href='https://twitter.com/the_slide555' target='_blank'>üê¶ Follow me</a>\n",
        "    \"\"\",\n",
        "    examples=[\n",
        "        [\"make money online\"],\n",
        "        [\"best laptops under 50000 in India\"],\n",
        "        [\"how to lose weight without exercise\"]\n",
        "    ],\n",
        "    cache_examples=False,\n",
        "    flagging_mode=\"never\",\n",
        "    theme=\"soft\"\n",
        ")\n",
        "\n",
        "# üåê ‡§≤‡§æ‡§á‡§µ ‡§≤‡§ø‡§Ç‡§ï ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•ã\n",
        "demo.launch()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 650
        },
        "id": "iWEVDrwDUeLo",
        "outputId": "2ec02f14-2a21-441a-900c-9aee54bc2753"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "It looks like you are running Gradio on a hosted Jupyter notebook, which requires `share=True`. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n",
            "\n",
            "Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n",
            "* Running on public URL: https://570160b3e82e8339a1.gradio.live\n",
            "\n",
            "This share link expires in 1 week. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div><iframe src=\"https://570160b3e82e8339a1.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": []
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ‡§Ø‡•á ‡§ï‡•ã‡§° Colab ‡§Æ‡•á‡§Ç ‡§ö‡§≤‡§æ‡§ì ‚Üí ‡§Ø‡•á requirements.txt ‡§¨‡§® ‡§ú‡§æ‡§è‡§ó‡§æ\n",
        "%%writefile requirements.txt\n",
        "\n",
        "gradio\n",
        "requests"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BUDsd2bwZRHb",
        "outputId": "9a47f233-0464-46e4-dfb1-e8dc3124b9ac"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing requirements.txt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "\n",
        "files.download('app.py')\n",
        "files.download('requirements.txt')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 327
        },
        "id": "T3nv_X5cZxkV",
        "outputId": "9d745f53-61bc-4aa3-b32b-fd788bd67a8e"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "Cannot find file: app.py",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-3844505495.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdownload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'app.py'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdownload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'requirements.txt'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36mdownload\u001b[0;34m(filename)\u001b[0m\n\u001b[1;32m    231\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0m_os\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexists\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    232\u001b[0m     \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'Cannot find file: {}'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 233\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mFileNotFoundError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=undefined-variable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    234\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    235\u001b[0m   \u001b[0mcomm_manager\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_IPython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkernel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcomm_manager\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: Cannot find file: app.py"
          ]
        }
      ]
    }
  ]
}